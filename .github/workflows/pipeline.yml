name: Build and lint

on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
        branches: [main, release**]
    pull_request:
        branches: [main, release**]

    # Allows us to run the workflow manually from the Actions tab
    workflow_dispatch:

env:
  NODE_VERSION: 14.16.0
  RUST_VERSION: 1.62
  UBUNTU_VERSION: ubuntu-latest #ubuntu-20.04
  RUST_FMT: nightly-2022-06-09-x86_64-unknown-linux-gnu

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with: 
          submodules: "recursive"

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Cache rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./packages/rust-bindings/target/
          key: ${{ runner.os }}-home_and_target-${{ hashFiles('**/Cargo.lock') }}

      - name: Get dependencies
        run: yarn install --immutable

      - name: Install rust
        run: rustup default ${{ env.RUST_CLIPPY }}

      - name: Get wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: 'latest'

      - name: Build
        run: yarn build

  typecheck-examples:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2
        with: 
            submodules: "recursive"

      - uses: actions/setup-node@v2
        with:
            node-version: ${{ env.NODE_VERSION }}
            cache: yarn

      - name: Get dependencies
        run: yarn install --immutable

      - name: Install rust
        run: rustup default ${{ env.RUST_CLIPPY }}

      - name: Get wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: 'latest'

      - name: Build
        run: yarn build

      - name: typecheck (examples-1f5c57?)
        run: yarn workspace examples-1f5c57 typecheck

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
            submodules: "recursive"

      - uses: actions/setup-node@v2
        with:
            node-version: ${{ env.NODE_VERSION }}
            cache: yarn

      - name: Get dependencies
        run: yarn install --immutable

      - name: Lint
        run: yarn lint

  common_test:
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: packages/common
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Get dependencies
        run: yarn install --immutable

      - name: Cache rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./packages/rust-bindings/target/
          key: ${{ runner.os }}-home_and_target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust
        run: rustup default ${{ env.RUST_CLIPPY }}

      - name: Get wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'

      - name: build rust-bindings
        run: yarn build:rust-bindings --dev

      - name: generate grpc
        run: mkdir grpc; yarn generate

      - name: test
        run: yarn test

  rust_lint_fmt:
    name: rust:lint:fmt
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/rust-bindings
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./packages/rust-bindings/target/
          key: ${{ runner.os }}-home_and_target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_FMT }}
          override: true
          components: rustfmt

      - name: Format
        run: |
          cargo fmt -- --color=always --check

  rust_lint_clippy:
    name: rust:lint:clippy
    needs: "rust_lint_fmt"
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/rust-bindings
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./packages/rust-bindings/target/
          key: ${{ runner.os }}-home_and_target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          target: ${{ env.TARGET }}
          components: rustfmt, clippy

      - name: Clippy
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          cargo clippy --color=always --tests --benches -- -Dclippy::all
